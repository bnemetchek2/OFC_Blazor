@page "/CardSelect/"
@inject Radzen.DialogService dialogService
@inject Services.BrowserService BrowserService;
@*implements IDisposable*@

<div class="d-flex almostFullHeight" >
    <div class="row col-sm-6" >
        <div class="d-flex" style="height: 20%">
            <div class="no-card" style="width:20%;"></div>
            <CardsContainer cards=@FrontCards @ref=@FrontCardsContainer OnCardsUpdated="HandleCardsUpdated">
        @foreach (var card in FrontCards)
        {
            <div class="" style="width:20%;">
            <Card CardModel="card" Style="width: 100%;"  />
            </div>
        }
        </CardsContainer>
        </div>
        <div class="d-flex" style="height: 20%">
            <CardsContainer cards=@MiddleCards @ref=@MiddleCardsContainer OnCardsUpdated="HandleCardsUpdated">
        @foreach (var card in MiddleCards)
        {
            <div class="" style="width:20%;">
            <Card CardModel="card" Style="width: 100%;"  />
            </div>
        }
        </CardsContainer>
        </div>
        <div class="d-flex" style="height: 20%">
            <CardsContainer cards=@BackCards @ref=@BackCardsContainer OnCardsUpdated="HandleCardsUpdated">
        @foreach (var card in BackCards)
        {
            <div class="" style="width:20%;">
            <Card CardModel="card" Style="width: 100%;"  />
            </div>
        }
        </CardsContainer>
        </div>
        <div class="d-flex" style="height: 20%">
            <CardsContainer cards=@DrawCards @ref=@DrawCardsContainer OnCardsUpdated="HandleCardsUpdated">
        @foreach (var card in DrawCards)
        {
            <div class="" style="width:20%;">
            <Card CardModel="card" Style="width: 100%;"  />
            </div>
        }
        </CardsContainer>
        </div>
        <div class="d-flex" style="height: 20%">
            <CardsContainer cards=@DiscardCards @ref=@DiscardsCardsContainer OnCardsUpdated="HandleCardsUpdated">
        @foreach (var card in DiscardCards)
        {
            <div class="" style="width:20%;">
            <Card CardModel="card" Style="width: 100%;"  />
            </div>
        }
        </CardsContainer>
        </div>
    </div>

    <div class="row col-sm-6">
        <RadzenTabs style="height: 100%; width: 100%;" RenderMode="TabRenderMode.Client">
            <Tabs>
                <RadzenTabsItem Text="♤ Spades">
                    <FullSuitCards Suit="S" DisabledCards=SelectedCards />
                </RadzenTabsItem>
                <RadzenTabsItem Text="♡ Hearts">
                    <FullSuitCards Suit="H" DisabledCards=SelectedCards />
                </RadzenTabsItem>
                <RadzenTabsItem Text="♧ Clubs">
                    <FullSuitCards Suit="C" DisabledCards=SelectedCards />
                </RadzenTabsItem>
                <RadzenTabsItem Text="♢ Diamonds">
                    <FullSuitCards Suit="D" DisabledCards=SelectedCards />
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </div>
</div>



<div class="row">
    <div class="col-md-12 text-right">
        <RadzenButton Click="@((args) => dialogService.Close(false))" ButtonStyle="ButtonStyle.Secondary" Text="Cancel" Style="width: 120px" Class="mr-1" />
        <RadzenButton Click="@((args) => dialogService.Close(true))" Text="OK" Style="width: 120px" />
    </div>
</div>

@code {
    [Parameter] public List<int> FrontInts { get; set; }
    [Parameter] public List<int> MiddleInts { get; set; }
    [Parameter] public List<int> BackInts { get; set; }
    [Parameter] public List<int> DrawInts { get; set; }
    [Parameter] public List<int> DiscardInts { get; set; }

    List<CardModel> FrontCards = new List<CardModel>();
    List<CardModel> MiddleCards = new List<CardModel>();
    List<CardModel> BackCards = new List<CardModel>();
    List<CardModel> DrawCards = new List<CardModel>();
    List<CardModel> DiscardCards = new List<CardModel>();
    List<CardModel> SelectedCards => FrontCards.Concat(MiddleCards).Concat(BackCards).Concat(DrawCards).Concat(DiscardCards).ToList();

    CardsContainer FrontCardsContainer;
    CardsContainer MiddleCardsContainer;
    CardsContainer BackCardsContainer;
    CardsContainer DrawCardsContainer;
    CardsContainer DiscardsCardsContainer;

    CardModel BackCard = new CardModel(-1);
    CardModel EmptyCard = new CardModel(0);

    protected override void OnInitialized()
    {
        FrontInts.Where(i => i > 0).ToList().ForEach(i => FrontCards.Add(new CardModel(i)));
        while (FrontCards.Count < 3)
            FrontCards.Add(new CardModel(0));
        MiddleInts.Where(i => i > 0).ToList().ForEach(i => MiddleCards.Add(new CardModel(i)));
        while (MiddleCards.Count < 5)
            MiddleCards.Add(new CardModel(0));
        BackInts.Where(i => i > 0).ToList().ForEach(i => BackCards.Add(new CardModel(i)));
        while (BackCards.Count < 5)
            BackCards.Add(new CardModel(0));
        DrawInts.Where(i => i > 0).ToList().ForEach(i => DrawCards.Add(new CardModel(i)));
        while (DrawCards.Count < 3)
            DrawCards.Add(new CardModel(0));
        DiscardInts.Where(i => i > 0).ToList().ForEach(i => DiscardCards.Add(new CardModel(i)));
        while (DiscardCards.Count < 4)
            DiscardCards.Add(new CardModel(0));

    }

    protected override void OnParametersSet()
    {
        //Jobs.Clear();
        //Jobs.AddRange(Container.Jobs.Where(x => x.Status == ListStatus));
    }

    void HandleCardsUpdated((CardModel CardModel, List<CardModel> Cards) data)
    {
        //InvokeAsync(StateHasChanged);
    }
}
